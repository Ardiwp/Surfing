#!/system/bin/sh

BASE_DIR="/data/adb/box_bll"
CONFIG_FILE="${BASE_DIR}/scripts/box.config"
LOG_DIR="${BASE_DIR}/run/monitor_logs"
PID_FILE="${BASE_DIR}/run/monitor.pid"
DEBUG_LOG="${BASE_DIR}/run/current_debug.log"

[ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"
[ "$enable_monitor" != "true" ] && exit 0

#CLASH_BIN_NAME="clash"
#pidof clash >/dev/null 2>&1 || CLASH_BIN_NAME="mihomo"

mkdir -p "$LOG_DIR"
#mkdir -p "$(dirname "$DEBUG_LOG")"
TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
LOG_FILE="${LOG_DIR}/Battery_debug_${TIMESTAMP}.log"
echo $$ > "$PID_FILE"
#echo "" > "$DEBUG_LOG"

wakelock_name="surfing_monitor_lock"
wakelock_path="/sys/power/wake_lock"
wakeunlock_path="/sys/power/wake_unlock"

support_wakelock=false
if [ -w "$wakelock_path" ] && [ -w "$wakeunlock_path" ]; then
  support_wakelock=true
  echo "$wakelock_name" > "$wakelock_path"
fi

total_pos=0
count_pos=0
total_neg=0
count_neg=0

total_voltage_mv=0
voltage_count=0

start_ts=$(date +%s)
start_time_fmt=$(date '+%Y-%m-%d %H:%M:%S')
last_ts=$start_ts

voltage_raw=$(cat /sys/class/power_supply/battery/voltage_now 2>/dev/null)
voltage_mv=$((voltage_raw / 1000))
[ "$voltage_mv" -eq 0 ] && voltage_mv=3850

get_current_battery_level() {
  local level
  level=$(cat /sys/class/power_supply/battery/capacity 2>/dev/null)
  if [ -z "$level" ]; then
    level=$(dumpsys battery | grep 'level:' | awk '{print $2}')
  fi
  echo "$level"
}

start_battery_level=$(get_current_battery_level)

while :; do
    [ ! -f "$PID_FILE" ] && break

    [ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"
    [ "$enable_monitor" != "true" ] && break

    now_ts=$(date +%s)
    if [ "$now_ts" -gt "$last_ts" ]; then
        current_raw=$(cat /sys/class/power_supply/battery/current_now 2>/dev/null)
        current_volt=$(cat /sys/class/power_supply/battery/voltage_now 2>/dev/null)

        if [ -n "$current_raw" ]; then
            #echo "current_raw=$current_raw" >> "$DEBUG_LOG"
            if [ "$current_raw" -gt 0 ]; then
                total_neg=$(( total_neg + current_raw ))
                count_neg=$(( count_neg + 1 ))
            elif [ "$current_raw" -lt 0 ]; then
                abs_curr=$(( -current_raw ))
                total_pos=$(( total_pos + abs_curr ))
                count_pos=$(( count_pos + 1 ))
            fi
        fi

        if [ -n "$current_volt" ] && [ "$current_volt" -gt 1000000 ]; then
            current_volt_mv=$((current_volt / 1000))
            total_voltage_mv=$(( total_voltage_mv + current_volt_mv ))
            voltage_count=$(( voltage_count + 1 ))
        fi

        last_ts=$now_ts
    fi

    sleep 0.2
done

$support_wakelock && echo "$wakelock_name" > "$wakeunlock_path"

end_time_fmt=$(date '+%Y-%m-%d %H:%M:%S')
elapsed=$(( $(date +%s) - start_ts ))

calc_avg() {
  local total=$1
  local count=$2
  local voltage=$3
  if [ "$count" -gt 0 ]; then
    awk -v total="$total" -v count="$count" -v voltage="$voltage" '
    BEGIN {
      avg_ua = total / count
      avg_ma = avg_ua / 1000
      avg_w = (avg_ma * voltage) / 1000000
      printf "%.0f %.3f\n", avg_ma, avg_w
    }'
  else
    echo "0 0.000"
  fi
}

os_name=$(getprop ro.build.display.id)
android_ver=$(getprop ro.build.version.release)
sdk_ver=$(getprop ro.build.version.sdk)
device_model=$(getprop ro.product.model)
device_name=$(getprop ro.product.device)
brand=$(getprop ro.product.brand)
manufacturer=$(getprop ro.product.manufacturer)

if [ "$voltage_count" -gt 0 ]; then
  avg_voltage_mv=$(( total_voltage_mv / voltage_count ))
else
  avg_voltage_mv=$voltage_mv
fi

if [ -f /sys/class/power_supply/battery/voltage_now ]; then
    end_voltage_raw=$(cat /sys/class/power_supply/battery/voltage_now)
    end_voltage_mv=$((end_voltage_raw / 1000))
else
    end_voltage_mv=$avg_voltage_mv
fi
voltage_diff=$(( end_voltage_mv - avg_voltage_mv ))

read avg_chg_ma avg_chg_watt <<< $(calc_avg $total_pos $count_pos $avg_voltage_mv)
read avg_dch_ma avg_dch_watt <<< $(calc_avg $total_neg $count_neg $avg_voltage_mv)

root_type="Unknown"
root_version="Unknown"
detect_root_manager() {
  if [ -f /proc/kernelsu ]; then
    root_type="KernelSU"
    root_version=$(su -v 2>/dev/null | sed 's/:.*//')
  elif [ -d /data/adb/apatch ]; then
    root_type="APatch"
    root_version=$(su -v 2>/dev/null | sed 's/:.*//')
  else
    suver=$(su -v 2>/dev/null)
    suver_lc=$(echo "$suver" | tr '[:upper:]' '[:lower:]')

    if echo "$suver_lc" | grep -q "magisk"; then
      root_type="Magisk"
    elif echo "$suver_lc" | grep -q "apatch"; then
      root_type="APatch"
    elif echo "$suver_lc" | grep -q "kernelsu"; then
      root_type="KernelSU"
    else
      root_type="Unknown"
    fi

    root_version=$(echo "$suver" | sed 's/:.*//')
  fi
}
detect_root_manager

health_to_percent() {
  case "$1" in
    Good|good) echo 100 ;;
    Overheat) echo 90 ;;
    Dead) echo 10 ;;
    Cold) echo 50 ;;
    Unknown) echo 80 ;;
    *) echo "未知" ;;
  esac
}

get_battery_info() {
  battery_health=$(cat /sys/class/power_supply/battery/health 2>/dev/null)
  design_capacity_raw=$(cat /sys/class/power_supply/battery/charge_full_design 2>/dev/null)
  current_capacity_raw=$(cat /sys/class/power_supply/battery/charge_full 2>/dev/null)

  if [ -z "$battery_health" ]; then
    battery_health=$(dumpsys battery | grep 'health:' | awk '{print $2}')
  fi

  if [ -z "$design_capacity_raw" ] || [ -z "$current_capacity_raw" ]; then
    battery_level=$(dumpsys battery | grep 'level:' | awk '{print $2}')
    design_capacity_raw=-1
    current_capacity_raw=-1
  fi

  if [ "$design_capacity_raw" != "-1" ] && [ -n "$design_capacity_raw" ] && \
     [ "$current_capacity_raw" != "-1" ] && [ -n "$current_capacity_raw" ]; then
    design_capacity=$((design_capacity_raw / 1000))
    current_capacity=$((current_capacity_raw / 1000))
    
    battery_health_percent=$(( current_capacity * 100 / design_capacity ))
  else
    design_capacity="未知"
    
    if [ "$current_capacity_raw" != "-1" ] && [ -n "$current_capacity_raw" ]; then
      current_capacity=$((current_capacity_raw / 1000))
    else
      if [ -n "$battery_level" ]; then
        current_capacity="${battery_level}%"
      else
        current_capacity="未知"
      fi
    fi
    
    battery_health_percent=$(health_to_percent "$battery_health")
  fi
}
get_battery_info

end_battery_level=$(get_current_battery_level)

{
  echo "======== Surfing 系统电流运行报告 ========"
  echo "设备品牌: ${brand}"
  echo "设备制造商: ${manufacturer}"
  echo "设备型号: ${device_model}"
  echo "设备名称: ${device_name}"
  echo "Android 版本: ${android_ver} (SDK ${sdk_ver})"
  echo "OS 版本标识: ${os_name}"
  echo "Root 管理器类型: ${root_type}"
  echo "Root 管理器版本: ${root_version}"
  echo "电池健康度: ${battery_health} (约 ${battery_health_percent}%)"
  echo "设计容量: ${design_capacity} mAh"
  echo "当前容量: ${current_capacity} mAh"
  echo " "
  echo "总时长: ${elapsed} 秒"
  echo "采样次数 (充电): ${count_pos} S"
  echo "采样次数 (放电): ${count_neg} S"
  echo "平均电流 (充电绝对值): ${avg_chg_ma} mA"
  echo "平均功耗 (充电): ${avg_chg_watt} W"
  echo "平均电流 (放电): ${avg_dch_ma} mA"
  echo "平均功耗 (放电): ${avg_dch_watt} W"
  printf "平均压差: %.2f V\n" "$(echo "$avg_voltage_mv / 1000" | bc -l)"
  echo "监测时间: ${start_battery_level}% ${start_time_fmt}"
  echo "结束时间: ${end_battery_level}% ${end_time_fmt}"
  echo "====================================="
  echo "此为监测当前设备系统，该段运行期间的功耗"
  echo "并不是单独计算内核自身进程，数据仅供参考！"
} >> "$LOG_FILE"

rm -f "$PID_FILE"
#!/system/bin/sh

BASE_DIR="/data/adb/box_bll"
CONFIG_FILE="${BASE_DIR}/scripts/box.config"
LOG_DIR="${BASE_DIR}/run/monitor_logs"
PID_FILE="${BASE_DIR}/run/monitor.pid"
DEBUG_LOG="${BASE_DIR}/run/current_debug.log"

[ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"
[ "$enable_monitor" != "true" ] && exit 0

#CLASH_BIN_NAME="clash"
#pidof clash >/dev/null 2>&1 || CLASH_BIN_NAME="mihomo"

mkdir -p "$LOG_DIR"
TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
LOG_FILE="${LOG_DIR}/Battery_debug_${TIMESTAMP}.log"
echo $$ > "$PID_FILE"

start_battery_level=$(dumpsys battery | awk '/level:/ {print $2; exit}')

wakelock_name="surfing_monitor_lock"
wakelock_path="/sys/power/wake_lock"
wakeunlock_path="/sys/power/wake_unlock"

if [ "$enable_wakelock" = "true" ] && [ -w "$wakelock_path" ] && [ -w "$wakeunlock_path" ]; then
  echo "$wakelock_name" > "$wakelock_path"
  support_wakelock=true
fi

total_charge=0
count_charge=0
total_discharge=0
count_discharge=0
total_voltage_mv=0
voltage_count=0

start_ts=$(date +%s)
start_time_fmt=$(date '+%Y-%m-%d %H:%M:%S')
last_ts=$start_ts

voltage_mv=$(cat /sys/class/power_supply/battery/voltage_now 2>/dev/null)
voltage_mv=$((voltage_mv / 1000))

while :; do
    [ ! -f "$PID_FILE" ] && break
    [ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"
    [ "$enable_monitor" != "true" ] && break

    now_ts=$(date +%s)
    [ "$now_ts" -le "$last_ts" ] && sleep 0.2 && continue

    current_raw=$(cat /sys/class/power_supply/battery/current_now 2>/dev/null)
    current_volt=$(cat /sys/class/power_supply/battery/voltage_now 2>/dev/null)

    [ "$reverse_current_direction" = "true" ] && current_raw=$(( -current_raw ))
    abs_curr=$(( current_raw < 0 ? -current_raw : current_raw ))

    [ "$current_raw" -gt 0 ] && { total_charge=$((total_charge + abs_curr)); count_charge=$((count_charge + 1)); }
    [ "$current_raw" -lt 0 ] && { total_discharge=$((total_discharge + abs_curr)); count_discharge=$((count_discharge + 1)); }

    if [ -n "$current_volt" ] && [ "$current_volt" -gt 1000000 ]; then
      current_volt_mv=$((current_volt / 1000))
      total_voltage_mv=$((total_voltage_mv + current_volt_mv))
      voltage_count=$((voltage_count + 1))
    fi

    last_ts=$now_ts
    sleep 0.2
done

[ "$support_wakelock" = "true" ] && echo "$wakelock_name" > "$wakeunlock_path"

end_battery_level=$(dumpsys battery | awk '/level:/ {print $2; exit}')
battery_change=$((end_battery_level - start_battery_level))

if [ "$battery_change" -gt 0 ]; then
  battery_change_str="+${battery_change}%"
elif [ "$battery_change" -lt 0 ]; then
  battery_change_str="${battery_change}%"
else
  battery_change_str="0%"
fi

end_time_fmt=$(date '+%Y-%m-%d %H:%M:%S')
elapsed=$(( $(date +%s) - start_ts ))

if [ "$voltage_count" -gt 0 ]; then
  avg_voltage_mv=$(( total_voltage_mv / voltage_count ))
else
  avg_voltage_mv=$voltage_mv
fi

calc_avg() {
  local total=$1 count=$2 voltage=$3 sign=${4:-""}
  if [ "$count" -gt 0 ]; then
    awk -v total="$total" -v count="$count" -v voltage="$voltage" -v sign="$sign" \
      'BEGIN {
        avg_ma = (total / count) / 1000
        avg_w = (avg_ma * voltage) / 1000000
        printf "%s%.0f %s%.3f", sign, avg_ma, sign, avg_w
      }'
  else
    echo "0 0.000"
  fi
}

read avg_chg_ma avg_chg_watt <<< $(calc_avg $total_charge $count_charge $avg_voltage_mv)
read avg_dch_ma avg_dch_watt <<< $(calc_avg $total_discharge $count_discharge $avg_voltage_mv)

os_name=$(getprop ro.build.display.id)
android_ver=$(getprop ro.build.version.release)
sdk_ver=$(getprop ro.build.version.sdk)
device_model=$(getprop ro.product.model)
device_name=$(getprop ro.product.device)
brand=$(getprop ro.product.brand)
manufacturer=$(getprop ro.product.manufacturer)

detect_root_manager() {
  if [ -f /proc/kernelsu ]; then
    root_type="KernelSU"
  elif [ -d /data/adb/apatch ]; then
    root_type="APatch"
  else
    suver=$(su -v 2>/dev/null)
    suver_lc=$(echo "$suver" | tr '[:upper:]' '[:lower:]')
    case "$suver_lc" in
      *magisk*) root_type="Magisk" ;;
      *apatch*) root_type="APatch" ;;
      *kernelsu*) root_type="KernelSU" ;;
      *) root_type="Unknown" ;;
    esac
  fi
  root_version=$(su -v 2>/dev/null | sed 's/:.*//')
}
detect_root_manager

get_battery_info() {
  battery_health=$(cat /sys/class/power_supply/battery/health 2>/dev/null)
  [ -z "$battery_health" ] && battery_health=$(dumpsys battery | awk '/health:/ {print $2}')
  design_capacity_raw=$(cat /sys/class/power_supply/battery/charge_full_design 2>/dev/null || cat /sys/class/power_supply/battery/energy_full_design 2>/dev/null)
  current_capacity_raw=$(cat /sys/class/power_supply/battery/charge_full 2>/dev/null || cat /sys/class/power_supply/battery/energy_full 2>/dev/null)

  if [ -n "$design_capacity_raw" ] && [ -n "$current_capacity_raw" ]; then
    design_capacity=$((design_capacity_raw / 1000))
    current_capacity=$((current_capacity_raw / 1000))
    battery_health_percent=$((current_capacity * 100 / design_capacity))
  else
    design_capacity="未知"
    current_capacity="未知"
    battery_health_percent="未知"
  fi
}
get_battery_info

discharge_mAh=$(awk "BEGIN { printf \"%.3f\", $total_discharge / 3600000 }")
charge_mAh=$(awk "BEGIN { printf \"%.3f\", $total_charge / 3600000 }")

{
  echo "======== Surfing 系统电流运行报告 ========"
  echo "设备品牌: ${brand}"
  echo "设备制造商: ${manufacturer}"
  echo "设备型号: ${device_model}"
  echo "设备名称: ${device_name}"
  echo "Android 版本: ${android_ver} (SDK ${sdk_ver})"
  echo "OS 版本标识: ${os_name}"
  echo "Root 管理器类型: ${root_type}"
  echo "Root 管理器版本: ${root_version}"
  echo "电池健康度: ${battery_health} (约 ${battery_health_percent}%)"
  echo "设计容量: ${design_capacity} mAh"
  echo "当前容量: ${current_capacity} mAh"
  echo " "
  echo "总时长: ${elapsed} 秒"
  echo "期间变化: ${start_battery_level}% → ${end_battery_level}% = ${battery_change_str}"
  echo "采样次数 (充电): ${count_charge} S"
  echo "采样次数 (放电): ${count_discharge} S"
  echo "平均电流 (充电绝对值): ${avg_chg_ma} mA"
  echo "平均功耗 (充电): ${avg_chg_watt} W"
  echo "平均电流 (放电): ${avg_dch_ma} mA"
  echo "平均功耗 (放电): ${avg_dch_watt} W"
  printf "平均电压: %.2f V\n" "$(echo "$avg_voltage_mv / 1000" | bc -l)"
  echo " "
  echo "实际充电统计 (逐秒采样): ${charge_mAh} mAh"
  echo "实际耗电统计 (逐秒采样): ${discharge_mAh} mAh"
  echo "监测时间: ${start_time_fmt}"
  echo "结束时间: ${end_time_fmt}"
  echo "====================================="
  echo "此为监测当前设备系统，该段运行期间的功耗"
  echo "并不是单独计算内核自身进程，数据仅供参考！"
} >> "$LOG_FILE"

rm -f "$PID_FILE"
#!/system/bin/sh

BASE_DIR="/data/adb/box_bll"
CONFIG_FILE="${BASE_DIR}/scripts/box.config"
LOG_DIR="${BASE_DIR}/run/monitor_logs"
PID_FILE="${BASE_DIR}/run/monitor.pid"
DEBUG_LOG="${BASE_DIR}/run/current_debug.log"


init_vars() {
    [ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"
    [ "$enable_monitor" != "true" ] && exit 0

    mkdir -p "$LOG_DIR"
    TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
    LOG_FILE="${LOG_DIR}/Battery_debug_${TIMESTAMP}.log"
    echo $$ > "$PID_FILE"

    start_battery_level=$(dumpsys battery | awk '/level:/ {print int($2); exit}')

    wakelock_name="surfing_monitor_lock"
    wakelock_path="/sys/power/wake_lock"
    wakeunlock_path="/sys/power/wake_unlock"

    if [ "$enable_wakelock" = "true" ] && [ -w "$wakelock_path" ] && [ -w "$wakeunlock_path" ]; then
        echo "$wakelock_name" > "$wakelock_path"
        support_wakelock=true
    fi

    start_ts=$(date +%s)
    start_time_fmt=$(date '+%Y-%m-%d %H:%M:%S')
    last_ts=$start_ts

    voltage_mv=$(cat /sys/class/power_supply/battery/voltage_now 2>/dev/null)
    voltage_mv=$((voltage_mv / 1000))

    current_paths=(
        "/sys/class/power_supply/battery/current_now"
        "/sys/class/power_supply/bms/current_now"
        "/sys/class/power_supply/main/current_now"
        "/sys/class/power_supply/pmic/current_now"
    )

    for path in "${current_paths[@]}"; do
        if [ -r "$path" ]; then
            CURRENT_NOW_PATH="$path"
            break
        fi
    done

    voltage_paths=(
        "/sys/class/power_supply/battery/voltage_now"
        "/sys/class/power_supply/bms/voltage_now"
        "/sys/class/power_supply/main/voltage_now"
        "/sys/class/power_supply/pmic/voltage_now"
    )

    for path in "${voltage_paths[@]}"; do
        if [ -r "$path" ]; then
            VOLTAGE_NOW_PATH="$path"
            break
        fi
    done

    if [ -z "$VOLTAGE_NOW_PATH" ]; then
        VOLTAGE_NOW_PATH="/dev/null"
    fi

    
    dis_indices=""
    count_all=0
    total_temp=0
    temp_count=0
    max_temp=""
    log_interval=300
    last_log_ts=0
    count_charge=0
    total_discharge=0
    count_discharge=0
    total_voltage_mv=0
    voltage_count=0
    current_volt_mv=0
    total_charge_uAh=0
    total_discharge_uAh=0
    last_power_mode=""
    full_charge_ts=""
}

get_battery_temp() {
    for path in \
        /sys/class/power_supply/battery/temp \
        /sys/class/power_supply/bms/temp \
        /sys/class/power_supply/usb/temp; do
        [ -f "$path" ] && cat "$path" && return
    done
    echo "N/A"
}

get_battery_cycle_count() {
    for path in \
        /sys/class/power_supply/battery/cycle_count \
        /sys/class/power_supply/battery/batt_cycle \
        /sys/class/power_supply/battery/fg_cycle \
        /sys/class/power_supply/bms/cycle_count \
        /sys/class/power_supply/maxfg/cycle_count \
        /sys/class/power_supply/smfg/cycle_count \
        /sys/class/power_supply/s2f/cycle_count
    do
        if [ -f "$path" ]; then
            value=$(cat "$path")
            if echo "$value" | grep -qE '^[0-9]+$'; then
                echo "$value"
                return
            fi
        fi
    done
    echo "未知或不支持"
}

battery_cycle_count=$(get_battery_cycle_count)

calc_avg() {
    local total=$1 count=$2 voltage=$3 sign=${4:-""}
    if [ "$count" -gt 0 ]; then
        awk -v total="$total" -v count="$count" -v voltage="$voltage" -v sign="$sign" \
          'BEGIN {
            avg_ma = (total / count) / 1000
            avg_w = (avg_ma * voltage) / 1000000
            printf "%s%.0f %s%.3f", sign, avg_ma, sign, avg_w
          }'
    else
        echo "0 0.000"
    fi
}

detect_root_manager() {
    if [ -f /proc/kernelsu ]; then
        root_type="KernelSU"
    elif [ -d /data/adb/apatch ]; then
        root_type="APatch"
    else
        suver=$(su -v 2>/dev/null)
        suver_lc=$(echo "$suver" | tr '[:upper:]' '[:lower:]')
        case "$suver_lc" in
            *magisk*) root_type="Magisk" ;;
            *apatch*) root_type="APatch" ;;
            *kernelsu*) root_type="KernelSU" ;;
            *) root_type="Unknown" ;;
        esac
    fi
    root_version=$(su -v 2>/dev/null | sed 's/:.*//')
}

get_battery_info() {
    battery_health=$(cat /sys/class/power_supply/battery/health 2>/dev/null)
    [ -z "$battery_health" ] && battery_health=$(dumpsys battery | awk '/health:/ {print $2}')
    design_capacity_raw=$(cat /sys/class/power_supply/battery/charge_full_design 2>/dev/null || cat /sys/class/power_supply/battery/energy_full_design 2>/dev/null)
    current_capacity_raw=$(cat /sys/class/power_supply/battery/charge_full 2>/dev/null || cat /sys/class/power_supply/battery/energy_full 2>/dev/null)

    if [ -n "$design_capacity_raw" ] && [ -n "$current_capacity_raw" ]; then
        design_capacity=$((design_capacity_raw / 1000))
        current_capacity=$((current_capacity_raw / 1000))
        battery_health_percent=$((current_capacity * 100 / design_capacity))
    else
        design_capacity="未知"
        current_capacity="未知"
        battery_health_percent="未知"
    fi
}

monitor_loop() {
    while :; do
        [ ! -f "$PID_FILE" ] && break
        [ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"
        [ "$enable_monitor" != "true" ] && break

        now_ts=$(date +%s)
        [ "$now_ts" -le "$last_ts" ] && sleep 0.2 && continue

        battery_status=$(cat /sys/class/power_supply/battery/status 2>/dev/null)
        battery_capacity=$(cat /sys/class/power_supply/battery/capacity 2>/dev/null)
        current_raw=$(cat "$CURRENT_NOW_PATH" 2>/dev/null)
        current_volt=$(cat "$VOLTAGE_NOW_PATH" 2>/dev/null)

        [ "$reverse_current_direction" = "true" ] && current_raw=$(( -current_raw ))

        abs_curr_uA=${current_raw#-}
        
        if [ "$current_raw" -gt 0 ]; then
            power_mode="charging"
        elif [ "$current_raw" -lt 0 ]; then
            power_mode="discharging"
        else
            power_mode="idle"
        fi
        
        last_power_mode="$power_mode"
        
        battery_temp=$(get_battery_temp)
        if [ "$battery_temp" != "N/A" ] && [ "$battery_temp" -gt 0 ]; then
            total_temp=$((total_temp + battery_temp))
            temp_count=$((temp_count + 1))
        
            if [ -z "$max_temp" ] || [ "$battery_temp" -gt "$max_temp" ]; then
                max_temp=$battery_temp
            fi
        fi
        
        if [ "$power_mode" = "charging" ]; then
            if [ "$battery_capacity" -ge 100 ] && [ -z "$full_charge_ts" ]; then
                full_charge_ts=$(date '+%T')
            fi
        
            if [ "$battery_status" = "Full" ] || [ "$battery_status" = "Not charging" ] || [ "$battery_capacity" -ge 100 ]; then
                sleep 0.2
                continue
            fi
        
            if [ "$current_raw" -ge 1000 ]; then
                total_charge_uAh=$(awk -v t="$total_charge_uAh" -v c="$abs_curr_uA" 'BEGIN{printf "%.0f", t + c}')
                count_charge=$((count_charge + 1))
            fi
        fi
        
        if [ "$power_mode" = "discharging" ]; then
            if [ "$abs_curr_uA" -ge 1000 ]; then
                total_discharge_uAh=$(awk -v t="$total_discharge_uAh" -v c="$abs_curr_uA" 'BEGIN{printf "%.0f", t + c}')
                count_discharge=$((count_discharge + 1))
                dis_indices+=("$count_all")
            fi
        fi
        
        if [ -n "$current_volt" ] && [ "$current_volt" -gt 1000000 ]; then
            current_volt_mv=$((current_volt / 1000))
            total_voltage_mv=$((total_voltage_mv + current_volt_mv))
            voltage_count=$((voltage_count + 1))
        fi

        last_ts=$now_ts
        count_all=$((count_all + 1))
        sleep 0.2
    done
}

generate_report() {
    end_battery_level=$(dumpsys battery | awk '/level:/ {print int($2); exit}')
    battery_change=$((end_battery_level - start_battery_level))

    if [ "$battery_change" -gt 0 ]; then
        battery_change_str="+${battery_change}%"
    elif [ "$battery_change" -lt 0 ]; then
        battery_change_str="${battery_change}%"
    else
        battery_change_str="0%"
    fi

    end_time_fmt=$(date '+%Y-%m-%d %H:%M:%S')
    elapsed=$(( $(date +%s) - start_ts ))

    if [ "$voltage_count" -gt 0 ]; then
        avg_voltage_mv=$(( total_voltage_mv / voltage_count ))
    else
        avg_voltage_mv=$voltage_mv
    fi

    read avg_chg_ma avg_chg_watt <<< $(calc_avg $total_charge_uAh $count_charge $avg_voltage_mv)
    read avg_dch_ma avg_dch_watt <<< $(calc_avg $total_discharge_uAh $count_discharge $avg_voltage_mv)

    os_name=$(getprop ro.build.display.id)
    android_ver=$(getprop ro.build.version.release)
    sdk_ver=$(getprop ro.build.version.sdk)
    device_model=$(getprop ro.product.model)
    device_name=$(getprop ro.product.device)
    brand=$(getprop ro.product.brand)
    manufacturer=$(getprop ro.product.manufacturer)

    detect_root_manager
    get_battery_info

    charge_mAh=$(awk -v u="$total_charge_uAh" 'BEGIN{printf "%.1f", u/3600000}')
    discharge_mAh=$(awk -v u="$total_discharge_uAh" 'BEGIN{printf "%.1f", u/3600000}')

    if [ -n "$design_capacity" ] && [ "$design_capacity" -gt 0 ]; then
        battery_used_mAh=$(( (end_battery_level - start_battery_level) * design_capacity / 100 ))
    else
        battery_used_mAh=0
    fi

    if [ "$battery_used_mAh" -gt 0 ]; then
        battery_used_mAh_str="+$battery_used_mAh"
    elif [ "$battery_used_mAh" -lt 0 ]; then
        battery_used_mAh_str="$battery_used_mAh"
    else
        battery_used_mAh_str="0"
    fi

    if [ -n "$design_capacity" ] && [ "$design_capacity" -gt 0 ]; then
        charge_pct=$(awk "BEGIN { printf \"%.1f\", ($charge_mAh * 100.0) / $design_capacity }")
        discharge_pct=$(awk "BEGIN { printf \"%.1f\", ($discharge_mAh * 100.0) / $design_capacity }")
    else
        charge_pct=0
        discharge_pct=0
    fi

    if [ "$temp_count" -gt 0 ]; then
        avg_temp_c=$(awk -v t="$total_temp" -v c="$temp_count" 'BEGIN{printf "%.1f", t / c / 10}')
        max_temp_c=$(awk -v t="$max_temp" 'BEGIN{printf "%.1f", t / 10}')
    fi

    avg_voltage_v=$(awk -v mv="$avg_voltage_mv" 'BEGIN{ printf "%.2f", mv/1000 }')

    
    confidence="不可信😞"
    confidence_level="极低（未判断）"
    full_capacity_info="0.00"
    health_percent="0.0"
    
    battery_change_abs=${battery_change#-}
    
    if [ "$battery_change_abs" -ge 50 ]; then
        confidence_level="极高（90%+）"
    elif [ "$battery_change_abs" -ge 30 ]; then
        confidence_level="高（80~90%）"
    elif [ "$battery_change_abs" -ge 15 ]; then
        confidence_level="中（60~80%）"
    elif [ "$battery_change_abs" -ge 5 ]; then
        confidence_level="低（40~60%）"
    else
        confidence_level="极低（<40%）"
    fi
    
    
    total_count=$((count_charge + count_discharge))
    
    if [ "$total_count" -eq 0 ]; then
        confidence="无有效采样数据"
        full_capacity_info="0.00"
        health_percent="0.0"
        confidence_level="极低（无数据）"
    else
        ratio_charge=$((100 * count_charge / total_count))
        ratio_discharge=$((100 * count_discharge / total_count))
    
        if [ "$count_charge" -gt 0 ] && [ "$count_discharge" -gt 0 ]; then
            edge_limit=$((count_all / 20))
        
            dis_front=1
            dis_back=1
        
            
            for sec in $dis_indices; do
                if [ "$sec" -gt "$edge_limit" ]; then
                    dis_front=0
                fi
                if [ "$sec" -lt $((count_all - edge_limit)) ]; then
                    dis_back=0
                fi
            done
        fi
        
        if [ "$dis_edge_valid" -eq 1 ]; then
            if [ "$count_discharge" -le 10 ] && [ $((100 * count_discharge / total_count)) -le 10 ]; then
                confidence="可信😋 基于充电数据"
                confidence_level="中（边缘干扰）"
            else
                confidence="不可信😞 放电虽集中边缘但占比偏高"
                confidence_level="低（混合采样）"
            fi
        elif [ "$ratio_discharge" -le 10 ]; then
            confidence="可信😋 基于充电数据"
            
        elif [ "$ratio_charge" -le 10 ]; then
            confidence="可信😋 基于放电数据"
            
        else
            confidence="不可信😞 放电混合分布"
            confidence_level="极低（混合采样）"
        fi
    
        
        if [ "$battery_change" -gt 0 ] && awk "BEGIN { exit !($charge_mAh > 0 && $battery_change >= 3) }"; then
            estimated_full_capacity=$(awk -v mAh="$charge_mAh" -v pct="$battery_change" \
                'BEGIN { printf "%.1f", mAh * 100 / pct }')
        elif [ "$battery_change" -lt 0 ] && awk "BEGIN { exit !($discharge_mAh > 0 && $battery_change_abs >= 3) }"; then
            estimated_full_capacity=$(awk -v mAh="$discharge_mAh" -v pct="$battery_change_abs" \
                'BEGIN { printf "%.1f", mAh * 100 / pct }')
        fi
    
        if [ -n "$estimated_full_capacity" ]; then
            full_capacity_info="$estimated_full_capacity"
            health_percent=$(awk -v full="$estimated_full_capacity" -v design="$design_capacity" \
              'BEGIN { if (design > 0) printf "%.1f", full * 100 / design; else print "0.0" }')
        fi
    fi

    {
        echo "======== Surfing 系统电流运行报告 ========"
        echo "设备品牌: ${brand}"
        echo "设备制造商: ${manufacturer}"
        echo "设备型号: ${device_model}"
        echo "设备名称: ${device_name}"
        echo "Android 版本: ${android_ver} (SDK ${sdk_ver})"
        echo "OS 版本标识: ${os_name}"
        echo "Root 管理器类型: ${root_type}"
        echo "Root 管理器版本: ${root_version}"
        echo "电池健康度: ${battery_health} (约 ${battery_health_percent}%)"
        echo "循环次数：$battery_cycle_count 次"
        echo "设计容量: ${design_capacity} mAh"
        echo "当前容量: ${current_capacity} mAh"
        echo " "
        echo "总时长: ${elapsed} 秒"
        echo "期间变化: ${start_battery_level}% → ${end_battery_level}% = ${battery_change_str}"
        echo "充满时间: $full_charge_ts"
        echo "采样次数 (充电): ${count_charge} S"
        echo "采样次数 (放电): ${count_discharge} S"
        echo "平均电流 (充电绝对值): ${avg_chg_ma} mA"
        echo "平均功耗 (充电): ${avg_chg_watt} W"
        echo "平均电流 (放电): ${avg_dch_ma} mA"
        echo "平均功耗 (放电): ${avg_dch_watt} W"
        echo "平均电压: ${avg_voltage_v} V"
        echo "平均温度: ${avg_temp_c}°C"
        echo "最高温度: ${max_temp_c}°C"
        echo "充电总电流原始累计: ${total_charge_uAh} μAh"
        echo "放电总电流原始累计: ${total_discharge_uAh} μAh"
        echo " "
        echo "期间变化估算 (基于设计容量结算): ${battery_used_mAh_str} mAh"
        echo "实际充入统计 (电流实时采样): ${charge_mAh} mAh (${charge_pct}%)"
        echo "实际耗电统计 (电流实时采样): ${discharge_mAh} mAh (${discharge_pct}%)"
        echo "推算真实容量 (基于实时电流): ${full_capacity_info} mAh"
        echo "电池健康度估算: ${health_percent}%"
        echo "推算真实容量可信度: $confidence_level"
        echo "真实容量可信度参考: $confidence"
        echo "采样占比 (充电): ${ratio_charge}%"
        echo "采样占比 (放电): ${ratio_discharge}%"
        echo "监测时间: ${start_time_fmt}"
        echo "结束时间: ${end_time_fmt}"
        echo "====================================="
        echo "此为监测当前设备系统，该段运行期间的功耗"
        echo "并不是单独计算内核自身进程，数据仅供参考！"
    } >> "$LOG_FILE"
}

cleanup() {
    [ "$support_wakelock" = "true" ] && echo "$wakelock_name" > "$wakeunlock_path"
    rm -f "$PID_FILE"
}

main() {
    init_vars
    monitor_loop
    generate_report
    cleanup
}

main